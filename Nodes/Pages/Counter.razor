@page "/counter"
@using Nodes.Components
//@using System.Text.Json;
//@using System.Text.Json.Serialization;
@using Newtonsoft;
@using System.IO;
//@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using System.Dynamic;
@using Newtonsoft.Json.Converters;
@using System.Linq.Dynamic.Core;


<PageTitle>Json Convert</PageTitle>

<h1>Converter</h1>

<DragDropList TItem="NodeDTO"
               Items="TopLevelItems"
               Context="team"
               AllowsDrag="true">
    <ItemTemplate>
        <TeamComponent team="@team"></TeamComponent>
    </ItemTemplate>
</DragDropList>
<button @onclick="PrintJson">
    Print Json
</button>

@code 
{
    public List<NodeDTO> TopLevelItems = new List<NodeDTO>();
    public IQueryable<RawFileDTO> Employees;

    private void PrintJson()
    {
        string ser1 = System.Text.Json.JsonSerializer.Serialize(TopLevelItems);
        Console.WriteLine(ser1);
        desJson(ser1);

        var testCsv = loadTestCSV().AsQueryable();


        //var x = testCsv.Select("new {column1, column2}").GroupBy("column1");
        //var x = testCsv.GroupBy("column1").Select("new(count(column1) as count)");
        var x = testCsv.Select("new {column1, column2, column3}").GroupBy("column1");
        //Console.WriteLine(x);
        string ser3 = System.Text.Json.JsonSerializer.Serialize(x);
        Console.WriteLine("ser3>> " + ser3);

        foreach (var i in x)
        {
            //        Console.WriteLine(">>>>" + i.column1.ToString(), i.column2.ToString());
            //var xx = i.ToString();
 //           var yy = (RawFileDTO)(i);
 //           Console.WriteLine(yy.column1);
            Console.WriteLine(i);
            string ser2 = System.Text.Json.JsonSerializer.Serialize(i);
            Console.WriteLine("ser2>> "+ser2);
        }

        //var y = testCsv.ToList().GroupBy(_ => _.column1);

 //       var y = testCsv.ToList()
 //      .GroupBy(x => new { x.column1})
 //      .Select(y => new RawFileDTO(){
 //          column1 = y.Key.column1,
 //          column2 = y./
//
//       });
        Console.WriteLine("==");

        //string ser2 = System.Text.Json.JsonSerializer.Serialize(y);
        //Console.WriteLine(ser2);



        //             var deSer1 = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(ser1);
        //
        //             Console.WriteLine(deSer1.Name);
        //var deSer1 = JsonSerializer.Deserialize<NodeDTO>(ser1);   
        //var result = JObject.Parse(ser1);

        //        deserialize_to_linq_to_json_jobject(ser1);

        //       foreach (var v in oClass)
        //       {
        //           foreach (var i in v)
        //           {
        //               Console.WriteLine(i.ToString());
        //           }
        //       }

        //        var testData = loadTestCSV();

        // convert

        //      var serialJson = Newtonsoft.Json.JsonConvert.SerializeObject(testData);

    }

    protected override void OnInitialized()
    {
        var test = new NodeDTO();
        test.Name = "column1";
        test.Nodes.Add(new NodeDTO { Name = "column2", Nodes = new List<NodeDTO>() });
        var test2 = new NodeDTO();
        test2.Name = "column3";
        test2.Nodes.Add(new NodeDTO { Name = "column4", Nodes = new List<NodeDTO>() });
        TopLevelItems.Add(test);
        TopLevelItems.Add(test2);

    }

    private List<RawFileDTO> loadTestCSV()
    {
        var rtnList = new List<RawFileDTO>();
        rtnList.Add(new RawFileDTO { column1 = "a1", column2 = "b1", column3 = "c1", column4 = "d1"});
        rtnList.Add(new RawFileDTO { column1 = "a1", column2 = "b1", column3 = "c2", column4 = "d2" });
        rtnList.Add(new RawFileDTO { column1 = "a1", column2 = "b2", column3 = "c3", column4 = "d3" });
        rtnList.Add(new RawFileDTO { column1 = "a2", column2 = "b2", column3 = "c4", column4 = "d4" });
        rtnList.Add(new RawFileDTO { column1 = "a2", column2 = "b3", column3 = "c5", column4 = "d5" });
        rtnList.Add(new RawFileDTO { column1 = "a3", column2 = "b3", column3 = "c6", column4 = "d6" });

        return rtnList;

    }

    public void desJson(string json)
    {
        //      var dataJson = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ExpandoObject>>
        //      (json, new ExpandoObjectConverter());
        //       IDictionary<string, JToken> Jsondata = JObject.Parse(json);
        var deSer1 = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(json);

        printNode(null, deSer1);
    }



    private void printNode(string? parent, dynamic? oObj)
    {


        if (parent == null)
        {
            parent = "";
        }
        foreach (var node in oObj)
        {
            Console.WriteLine(parent + ">>" + node.Name);
            printNode(node.Name.ToString(), node.Nodes);

 //           foreach (var element in node.Nodes)
 //           {
 //               Console.WriteLine(">" + element.Name);
 //           }
        }
    
    }

   

   
    
}
